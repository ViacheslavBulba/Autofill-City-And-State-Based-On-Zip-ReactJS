{"version":3,"sources":["ZipLookUp.js","App.js","reportWebVitals.js","index.js"],"names":["ZipLookUp","useState","zip","setZip","state","setState","city","setCity","allZipCodes","setAllZipCodes","lookupHappened","setLookupHappened","useEffect","fetch","then","response","json","result","zipCodes","map","item","className","type","placeholder","value","onChange","e","a","val","replace","length","entry","filter","toLowerCase","includes","handleZipChange","target","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8TAuEeA,MAnEf,WAEI,MAAsBC,mBAAS,IAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAwBJ,mBAAS,IAAjC,mBAAOK,EAAP,KAAaC,EAAb,KACA,EAAsCN,mBAAS,IAA/C,mBAAOO,EAAP,KAAoBC,EAApB,KACA,EAA4CR,oBAAS,GAArD,mBAAOS,EAAP,KAAuBC,EAAvB,KA+CA,OA7CAC,qBAAU,WACNC,MAAM,sBACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACF,IAAMC,EAAWD,EAAOE,KAAI,SAAAC,GACxB,OAAOA,KAEXX,EAAeS,QAExB,IAqCC,sBAAKG,UAAU,UAAf,UACI,+BACI,6DACA,sEACA,sGAEJ,uBAAOC,KAAK,OAAOC,YAAY,MAAMC,MAAOtB,EAAKuB,SAAU,SAACC,GAAD,OAzC3C,SAACC,GACrB,IAAIC,EAAMD,EAAEE,QAAQ,QAAS,IAS7B,GARID,EAAIE,OAAS,GACb3B,EAAOyB,GAEPA,EAAIE,OAAS,GAAKpB,IAClBL,EAAS,IACTE,EAAQ,IACRI,GAAkB,IAEH,IAAfiB,EAAIE,OAAc,CAClB,IAAMC,EAAQvB,EAAYwB,QAAO,SAAAZ,GAC7B,OAAOA,EAAI,IAAQa,cAAcC,SAASN,EAAIK,kBAE7B,IAAjBF,EAAMD,QACNzB,EAAS,kBACTE,EAAQ,kBACRI,GAAkB,IAKM,IAAjBoB,EAAMD,QACbzB,EAAS0B,EAAM,GAAN,YACTxB,EAAQwB,EAAM,GAAN,MACRpB,GAAkB,KAElBN,EAAS,uBACTE,EAAQ,uBACRI,GAAkB,KAY4CwB,CAAgBT,EAAEU,OAAOZ,UAC3F,uBAAOF,KAAK,OAAOC,YAAY,QAAQC,MAAOpB,EAAOqB,SAAU,SAACC,GAAD,OAAOrB,EAASqB,EAAEU,OAAOZ,UACxF,uBAAOF,KAAK,OAAOC,YAAY,OAAOC,MAAOlB,EAAMmB,SAAU,SAACC,GAAD,OAAOnB,EAAQmB,EAAEU,OAAOZ,cCtDlFa,MATf,WACE,OACE,qBAAKhB,UAAU,UAAf,SACE,cAAC,EAAD,OCMSiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB1B,MAAK,YAAkD,IAA/C2B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c8f0994b.chunk.js","sourcesContent":["import './ZipLookUp.css';\n\nimport React, { useState, useEffect } from 'react';\n\nfunction ZipLookUp() {\n\n    const [zip, setZip] = useState('');\n    const [state, setState] = useState('');\n    const [city, setCity] = useState('');\n    const [allZipCodes, setAllZipCodes] = useState([]);\n    const [lookupHappened, setLookupHappened] = useState(false);\n\n    useEffect(() => {\n        fetch('./zipCodesUSA.json')\n            .then(response => response.json())\n            .then(result => {\n                const zipCodes = result.map(item => {\n                    return item;\n                });\n                setAllZipCodes(zipCodes);\n            });\n    }, []);\n\n    const handleZipChange = (a) => {\n        let val = a.replace(/[^\\d]/, '');\n        if (val.length < 6) {\n            setZip(val);\n        }\n        if (val.length < 5 && lookupHappened) {\n            setState('');\n            setCity('');\n            setLookupHappened(false);\n        }\n        if (val.length === 5) {\n            const entry = allZipCodes.filter(item => {\n                return item['zip'].toLowerCase().includes(val.toLowerCase())\n            });\n            if (entry.length === 0) {\n                setState('No entry found');\n                setCity('No entry found');\n                setLookupHappened(true);\n                // setTimeout(() => { // clear the fields in 2 seconds after showing 'No entry found'\n                //     setState('');\n                //     setCity('');\n                // }, 2000);\n            } else if (entry.length === 1) {\n                setState(entry[0]['state_name']);\n                setCity(entry[0]['city']);\n                setLookupHappened(true);\n            } else {\n                setState('More than one match');\n                setCity('More than one match');\n                setLookupHappened(true);\n            }\n        }\n    };\n\n    return (\n        <div className=\"zip-box\">\n            <ol>\n                <li>Zip length limit = 5 digits</li>\n                <li>Only digits are allowed for entering</li>\n                <li>If the Zip changes after lookup - clear the state and city fields</li>\n            </ol>\n            <input type=\"text\" placeholder=\"Zip\" value={zip} onChange={(e) => handleZipChange(e.target.value)} />\n            <input type=\"text\" placeholder=\"State\" value={state} onChange={(e) => setState(e.target.value)} />\n            <input type=\"text\" placeholder=\"City\" value={city} onChange={(e) => setCity(e.target.value)} />\n        </div>\n    );\n}\n\nexport default ZipLookUp;\n","import './App.css';\nimport ZipLookUp from './ZipLookUp';\n\nfunction App() {\n  return (\n    <div className=\"app-box\">\n      <ZipLookUp />\n    </div>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}